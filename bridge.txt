#include <GL/glut.h>
#include<stdio.h>
#include<stdlib.h>
#include<math.h>

int b1_angle[] = {0.0,0.0,0.0};
int b2_angle[] = {0.0,0.0,0.0};
int fan[] = {0.0,0.0,0.0};
int fan_axis = 1;
int axis = 1;
int pgno = 0;
int plus_1 = 0,plus_2 = 0,min_1 = 0,min_2 = 0;
int signal = 0;
float truckX = 0.0;
int truck_move = 0;
int boatX = 520.0f,boatY = 0.0f;
float sx=-300,sy=-70;


void drawCircle(float radius, int segments) {
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(0.0, 0.0); // center of the circle
    for (int i = 0; i <= segments; i++) {
        float angle = 2.0 * 3.1415926 * (float)i / (float)segments;
        float x = radius * cosf(angle);
        float y = radius * sinf(angle);
        glVertex2f(x, y);
    }
    glEnd();
}


void renderBitmap(float x,float y,float z,void *font,char*string) 
{ 
	glColor3f(0.0,0.0,0.0);
	char *c; 
	glRasterPos3f(x, y,z); 
	for(c=string; *c != '\0'; c++) 
	{ 
		glutBitmapCharacter(font, *c); 
	} 
} 

void drawStart()
{
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_QUADS);
        glColor3f(0.3,1.0,0.0);
        glVertex2f(100.0,100.0);
        glVertex2f(600.0,100.0);
        glColor3f(0.19,0.81,0.98);
        glVertex2f(600.0,600.0);
        glVertex2f(100.0,600.0);
    glEnd();
    
    renderBitmap(220.0, 530.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"BANGALORE INSTITUTE OF TECHNOLOGY");
   	renderBitmap(280.0, 500.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"BRIDGE SIMULATION");
   	renderBitmap(180.0, 400.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"SRINIVASA AKSHITH CHOWDARY                1BI20CS041");
   	renderBitmap(180.0, 365.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"NEHAL M S                                 1BI20CS0115");
   	
   	
   	renderBitmap(230.0, 200.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"<---- press space bar to continue ---->");
	renderBitmap(250.0, 175.0, 0.0,GLUT_BITMAP_TIMES_ROMAN_24,"<----         'q' to quit         ---->");
   	  	
    
}

void drawLBridge() {
    

    glLoadIdentity();
    /*gluLookAt(0.0f, 0.0f, 5.0f,    // Eye position
              0.0f, 0.0f, 0.0f,    // Look-at position
              0.0f, 1.0f, 0.0f);   // Up vector*/
    glPushMatrix();
    
    //left - side
    	//pillar1
		glBegin(GL_QUADS);
		glColor3f(0.50f, 0.50f, 0.50f); 
		glVertex2f(100.0f,200.0f); // bottom - left
		glVertex2f(130.0f,200.0f); //bottom-right
		glVertex2f(130.0f,340.0f); // top-right
		glVertex2f(100.0f,340.0f); // top-left
		glEnd(); 
		
		//pillar 2
		glBegin(GL_QUADS); 
		glVertex2f(160.0f,200.0f); // bottom - left
		glVertex2f(185.0f,200.0f); //bottom-right
		glVertex2f(185.0f,340.0f); // top-right
		glVertex2f(160.0f,340.0f); // top-left
		glEnd(); 
		
		//road1
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f); 
		glVertex2f(100.0f,330.0f); // bottom - left
		glVertex2f(190.0f,330.0f); //bottom-right
		glVertex2f(190.0f,340.0f); // top-right
		glVertex2f(100.0f,340.0f); // top-left
		glEnd(); 
		
    
    //bridge rotation(left)
		glPushMatrix();
		
		glTranslatef(185.0,340.0f,0.0);
		glRotatef(b1_angle[axis], 0.0f, 0.0f,1.0f);
		glTranslatef(-185.0,-340.0f,0.0);
		
		//road 2
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f);
		glVertex2f(185.0f,330.0f); // bottom - left
		glVertex2f(350.0f,330.0f); //bottom-right
		glVertex2f(350.0f,340.0f); // top-right
		glVertex2f(185.0f,340.0f); // top-left
		glEnd(); 
		
		//metal - part(left)
		glColor3f(1.0f, 0.76f, 0.0f);
		glBegin(GL_QUADS);
		glVertex2f(185.0f,330.0f); 
		glVertex2f(190.0f,330.0f); 
		glVertex2f(226.0f,435.0f); 
		glVertex2f(226.0f,450.0f); 
		glEnd(); 
		glBegin(GL_QUADS);
		glVertex2f(226.0f,450.0f);
		glVertex2f(226.0f,435.0f);  
		glVertex2f(265.0f,330.0f); 
		glVertex2f(270.0f,330.0f); 
		glEnd();
		glBegin(GL_QUADS);
		glVertex2f(265.0f,330.0f); 
		glVertex2f(270.0f,330.0f); 
		glVertex2f(308.0f,435.0f); 
		glVertex2f(308.0f,450.0f); 
		glEnd(); 
		glBegin(GL_QUADS);
		glVertex2f(308.0f,450.0f);
		glVertex2f(308.0f,435.0f);  
		glVertex2f(349.0f,330.0f); 
		glVertex2f(354.0f,330.0f); 
		glEnd();
		glBegin(GL_QUADS);
		glVertex2f(226.0f,442.0f); 
		glVertex2f(226.0f,450.0f); 
		glVertex2f(308.0f,450.0f); 
		glVertex2f(308.0f,442.0f); 
		glEnd();
		glBegin(GL_QUADS);
		glVertex2f(350.0f,442.0f); 
		glVertex2f(350.0f,450.0f); 
		glVertex2f(308.0f,450.0f); 
		glVertex2f(308.0f,442.0f); 
		glEnd();
		 	
		glPopMatrix();
    
    glPopMatrix();
	

}

void drawRBridge()
{

	//right - side
		//pillar 3
		glBegin(GL_QUADS);
		glColor3f(0.50f, 0.50f, 0.50f); // Red color
		glVertex2f(570.0f,200.0f); // bottom - left
		glVertex2f(600.0f,200.0f); //bottom-right
		glVertex2f(600.0f,340.0f); // top-right
		glVertex2f(570.0f,340.0f); // top-left
		glEnd(); 
		
		//pillar 4
		glBegin(GL_QUADS);
		glVertex2f(540.0f,200.0f); // bottom - left
		glVertex2f(515.0f,200.0f); //bottom-right
		glVertex2f(515.0f,340.0f); // top-right
		glVertex2f(540.0f,340.0f); // top-left
		glEnd(); 
		
		//road 4
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f); // Red color
		glVertex2f(600.0f,330.0f); // bottom - left
		glVertex2f(510.0f,330.0f); //bottom-right
		glVertex2f(510.0f,340.0f); // top-right
		glVertex2f(600.0f,340.0f); // top-left
		glEnd();
    
    ///bridge rotation(right)
		glPushMatrix();
		
		glTranslatef(515.0,340.0f,0.0);
		glRotatef(b2_angle[axis], 0.0f, 0.0f,-1.0f);
		glTranslatef(-515.0,-340.0f,0.0);
		
		//road 3
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f); 
		glVertex2f(350.0,330.0f); // bottom - left
		glVertex2f(515.0f,330.0f); //bottom-right
		glVertex2f(515.0f,340.0f); // top-right
		glVertex2f(350.0f,340.0f); // top-left
		glEnd();
		
		//metal - part(right)
		glBegin(GL_QUADS);
		glColor3f(1.0f, 0.76f, 0.0f); 
		glVertex2f(520.0f,330.0f); 
		glVertex2f(515.0f,330.0f); 
		glVertex2f(474.0f,435.0f); 
		glVertex2f(474.0f,450.0f); 
		glEnd(); 
		glBegin(GL_QUADS);
		glVertex2f(474.0f,450.0f);
		glVertex2f(474.0f,435.0f);  
		glVertex2f(435.0f,330.0f); 
		glVertex2f(430.0f,330.0f); 
		glEnd();
		glBegin(GL_QUADS); 
		glVertex2f(430.0f,330.0f);
		glVertex2f(435.0f,330.0f);  
		glVertex2f(392.0f,450.0f); 
		glVertex2f(392.0f,435.0f); 
		glEnd(); 
		glBegin(GL_QUADS); 
		glVertex2f(392.0f,435.0f);
		glVertex2f(392.0f,450.0f);  
		glVertex2f(348.0f,330.0f); 
		glVertex2f(353.0f,330.0f); 
		glEnd();
		glBegin(GL_QUADS);
		glVertex2f(474.0f,442.0f); 
		glVertex2f(474.0f,450.0f); 
		glVertex2f(392.0f,450.0f); 
		glVertex2f(392.0f,442.0f); 
		glEnd();
		glBegin(GL_QUADS);
		glVertex2f(350.0f,442.0f); 
		glVertex2f(350.0f,450.0f); 
		glVertex2f(392.0f,450.0f); 
		glVertex2f(392.0f,442.0f); 
		glEnd();
		
		glPopMatrix();
}


void drawSignal() {
	
	//left - signal
		glPushMatrix();
		
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f); 
		glVertex2f(110.0f,590.0f);
		glVertex2f(110.0f,550.0f);  
		glVertex2f(150.0f,550.0f); 
		glVertex2f(150.0f,590.0f); 
		glEnd();
		
		glPopMatrix();
		
		glPushMatrix();
			
		if(signal == 0)
			glColor3f(0.0,1.0,0.0);
		else
			glColor3f(1.0,0.0,0.0);
		glTranslatef(130.0,570.0,0.0);
		drawCircle(12.0,50);
		
		glPopMatrix();
	
	//right - signal
		glPushMatrix();
		
		glBegin(GL_QUADS);
		glColor3f(0.0f, 0.0f, 0.0f); 
		glVertex2f(590.0f,590.0f);
		glVertex2f(590.0f,550.0f);  
		glVertex2f(550.0f,550.0f); 
		glVertex2f(550.0f,590.0f); 
		glEnd();
		
		glPopMatrix();
		
		glPushMatrix();
			
		if(signal == 0)
			glColor3f(0.0,1.0,0.0);
		else
			glColor3f(1.0,0.0,0.0);
		glTranslatef(570.0,570.0,0.0);
		drawCircle(12.0,50); 
		glEnd();
		
		glPopMatrix();
		
}




void drawTruck()
{
	glPushMatrix();
	
	if(truck_move == 1 && signal == 0)
		truckX += 0.6;
	if(truckX >= 650.0)
	{
		truck_move = 0;
		truckX = 0.0;
	}
	
	glTranslatef(truckX,0.0,0.0);
	
	//chasie
	glPushMatrix();
	glBegin(GL_QUADS);
	glColor3f(0.6f, 0.29f, 0.0f); 
	glVertex2f(30.0f,350.0f);
	glVertex2f(90.0f,350.0f);  
	glVertex2f(90.0f,370.0f); 
	glVertex2f(30.0f,370.0f); 
	glEnd();
	glPopMatrix();
	
	//cabin
	glPushMatrix();
	glBegin(GL_QUADS);
	glColor3f(0.0f, 1.0f, 0.5f); 
	glVertex2f(65.0f,370.0f);
	glVertex2f(90.0f,370.0f);  
	glVertex2f(90.0f,400.0f); 
	glVertex2f(65.0f,400.0f); 
	glEnd();
	glBegin(GL_QUADS);
	glColor3f(0.0f, 0.0f, 0.0f); 
	glVertex2f(65.0f,370.0f);
	glVertex2f(70.0f,370.0f);  
	glVertex2f(70.0f,410.0f); 
	glVertex2f(65.0f,410.0f); 
	glEnd();
	glPopMatrix();
	
	
	//light
	glPushMatrix();
	glBegin(GL_QUADS);
	glColor3f(1.0f, 1.0f, 0.0f); 
	glVertex2f(90.0f,365.0f);
	glVertex2f(93.0f,365.0f);  
	glVertex2f(93.0f,373.0f); 
	glVertex2f(90.0f,373.0f); 
	glEnd();
	glPopMatrix();
	
	
	//front - wheel
	glPushMatrix();
	glColor3f(1.0,1.0,1.0);
	glTranslatef(75.0,350.0,1.0);
	drawCircle(10.0,50);
	glPopMatrix();
	
	// back -wheel
	glPushMatrix();
	glColor3f(1.0,1.0,1.0);
	glTranslatef(45.0,350.0,1.0);
	drawCircle(10.0,50);
	glPopMatrix();
	
	glutPostRedisplay();
	glPopMatrix();

	
}


void drawLFan() 
{
	glPushMatrix();
	
		if(signal == 1)
			fan[1] += 1.5;
	
		glTranslatef(172.5,270.0f,0.0);
		glRotatef(fan[1], 0.0f, 0.0f,1.0f);
		glTranslatef(-172.5,-270.0f,0.0);
		
		//left - fan	
		glPushMatrix();
		
		glColor3f(0.0,1.0,0.6);
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(140.0,267.0,0.0);
		glVertex3f(140.0,273.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(143.0,300.0,0.0);
		glVertex3f(146.0,297.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(169.5,302.5,0.0);
		glVertex3f(175.5,302.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(169.5,237.5,0.0);
		glVertex3f(175.5,237.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(205.5,267.0,0.0);
		glVertex3f(205.5,273.0,0.0);
		glEnd();
		
		glPopMatrix();
		
		glPushMatrix();
		
		glTranslatef(172.5,270.0f,0.0);
		glRotatef(45, 0.0f, 0.0f,1.0f);
		glTranslatef(-172.5,-270.0f,0.0);
		
		glColor3f(0.0,1.0,0.6);
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(140.0,267.0,0.0);
		glVertex3f(140.0,273.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(143.0,300.0,0.0);
		glVertex3f(146.0,297.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(169.5,302.5,0.0);
		glVertex3f(175.5,302.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(169.5,237.5,0.0);
		glVertex3f(175.5,237.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(172.5,270.0,0.0);
		glVertex3f(205.5,267.0,0.0);
		glVertex3f(205.5,273.0,0.0);
		glEnd();
		
		glPopMatrix();
			
		
		glPushMatrix();
		glColor3f(1.0,0.87,0.0);
		glTranslatef(172.5,270.0,0.0);
		drawCircle(10.0,60);
		glPopMatrix();
		
		glutPostRedisplay();
	
	glPopMatrix();
	
	
}


void drawRFan()
{
	glPushMatrix();
		
		//right - fan
		
		if(signal == 1)
			fan[fan_axis] += 1.5;
	
		glTranslatef(527.5,270.0f,0.0);
		glRotatef(fan[fan_axis], 0.0f, 0.0f,1.0f);
		glTranslatef(-527.5,-270.0f,0.0);
		
		//left - fan	
		glPushMatrix();
		
		glColor3f(0.0,1.0,0.6);
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(494.0,267.0,0.0);
		glVertex3f(494.0,273.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(524.5,302.5,0.0);
		glVertex3f(530.5,302.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(524.5,237.5,0.0);
		glVertex3f(530.5,237.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(559.5,267.0,0.0);
		glVertex3f(559.5,273.0,0.0);
		glEnd();
		
		glPopMatrix();
		
		glPushMatrix();
		
		glTranslatef(527.5,270.0f,0.0);
		glRotatef(45, 0.0f, 0.0f,1.0f);
		glTranslatef(-527.5,-270.0f,0.0);
		
		glColor3f(0.0,1.0,0.6);
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(494.0,267.0,0.0);
		glVertex3f(494.0,273.0,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(524.5,302.5,0.0);
		glVertex3f(530.5,302.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(524.5,237.5,0.0);
		glVertex3f(530.5,237.5,0.0);
		glEnd();
		
		glBegin(GL_TRIANGLES);
		glVertex3f(527.5,270.0,0.0);
		glVertex3f(559.5,267.0,0.0);
		glVertex3f(559.5,273.0,0.0);
		glEnd();
		
		glPopMatrix();
		
		glPushMatrix();
		glColor3f(1.0,0.87,0.0);
		glTranslatef(527.5,270.0,0.0);
		drawCircle(10.0,60);
		glPopMatrix();
		
	glPopMatrix();
}

void drawShip()
{
	glPushMatrix();
	
	glTranslatef(sx,sy,0.0);
	
	//ship base 
 	glBegin(GL_QUADS);
    glColor3f(1.0f, 1.0f, 0.0f);
    glVertex2f(170.0f, 190.0f); 
    glVertex2f(300.0f, 190.0f); 
    glVertex2f(355.0f, 260.0f); 
    glVertex2f(145.0f, 260.0f); 
    glEnd();
    
    glPushMatrix();
    glColor3f(0.0,0.0,0.0);
    glTranslatef(235.0,225.0,0.0);
    drawCircle(20.0,80);
    glPopMatrix();
    
    glPushMatrix();
    glColor3f(1.0,1.0,0.0);
    glTranslatef(235.0,225.0,0.0);
    drawCircle(10.0,80);
    glPopMatrix();
    
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2f(265.0f, 218.0f); 
    glVertex2f(310.0f, 218.0f); 
    glVertex2f(322.0f, 232.0f); 
    glVertex2f(265.0f, 232.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2f(205.0f, 218.0f); 
    glVertex2f(165.0f, 218.0f); 
    glVertex2f(160.0f, 232.0f); 
    glVertex2f(205.0f, 232.0f); 
    glEnd();
    
    //DECK 1
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.84f, 0.84f); 
    glVertex2f(160.0f, 260.0f); 
    glVertex2f(320.0f, 260.0f); 
    glVertex2f(315.0f, 280.0f); 
    glVertex2f(165.0f, 280.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(170.0f, 265.0f); 
    glVertex2f(179.0f, 265.0f);
    glVertex2f(179.0f, 275.0f); 
    glVertex2f(170.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(189.0f, 265.0f); 
    glVertex2f(198.0f, 265.0f);
    glVertex2f(198.0f, 275.0f); 
    glVertex2f(189.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(208.0f, 265.0f); 
    glVertex2f(217.0f, 265.0f);
    glVertex2f(217.0f, 275.0f); 
    glVertex2f(208.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(227.0f, 265.0f); 
    glVertex2f(236.0f, 265.0f);
    glVertex2f(236.0f, 275.0f); 
    glVertex2f(227.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(246.0f, 265.0f); 
    glVertex2f(255.0f, 265.0f);
    glVertex2f(255.0f, 275.0f); 
    glVertex2f(246.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(265.0f, 265.0f); 
    glVertex2f(274.0f, 265.0f);
    glVertex2f(274.0f, 275.0f); 
    glVertex2f(265.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(284.0f, 265.0f); 
    glVertex2f(293.0f, 265.0f);
    glVertex2f(293.0f, 275.0f); 
    glVertex2f(284.0f, 275.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(302.0f, 265.0f); 
    glVertex2f(310.0f, 265.0f);
    glVertex2f(310.0f, 275.0f); 
    glVertex2f(302.0f, 275.0f);
    glEnd();
    
    
     //DECK 2
    glBegin(GL_QUADS);
    glColor3f(0.87f, 1.0f, 0.87f); 
    glVertex2f(175.0f, 280.0f); 
    glVertex2f(305.0f, 280.0f); 
    glVertex2f(300.0f, 300.0f); 
    glVertex2f(180.0f, 300.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(185.0f, 285.0f); 
    glVertex2f(195.0f, 285.0f);
    glVertex2f(195.0f, 295.0f); 
    glVertex2f(185.0f, 295.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(205.0f, 285.0f); 
    glVertex2f(215.0f, 285.0f);
    glVertex2f(215.0f, 295.0f); 
    glVertex2f(205.0f, 295.0f);
    glEnd();
    
    glBegin(GL_QUADS); 
    glVertex2f(225.0f, 285.0f); 
    glVertex2f(235.0f, 285.0f);
    glVertex2f(235.0f, 295.0f); 
    glVertex2f(225.0f, 295.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(245.0f, 285.0f); 
    glVertex2f(255.0f, 285.0f);
    glVertex2f(255.0f, 295.0f); 
    glVertex2f(245.0f, 295.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(265.0f, 285.0f); 
    glVertex2f(275.0f, 285.0f);
    glVertex2f(275.0f, 295.0f); 
    glVertex2f(265.0f, 295.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(285.0f, 285.0f); 
    glVertex2f(295.0f, 285.0f);
    glVertex2f(295.0f, 295.0f); 
    glVertex2f(285.0f, 295.0f);
    glEnd();
    
    
    
    
     //DECK 3
    glBegin(GL_QUADS);
    glColor3f(0.90f, 0.90f, 0.90f); 
    glVertex2f(190.0f, 300.0f); 
    glVertex2f(290.0f, 300.0f);
    glVertex2f(285.0f, 320.0f); 
    glVertex2f(195.0f, 320.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(199.0f, 305.0f); 
    glVertex2f(205.0f, 305.0f);
    glVertex2f(205.0f, 315.0f); 
    glVertex2f(199.0f, 315.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(215.0f, 305.0f); 
    glVertex2f(225.0f, 305.0f);
    glVertex2f(225.0f, 315.0f); 
    glVertex2f(215.0f, 315.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(235.0f, 305.0f); 
    glVertex2f(245.0f, 305.0f);
    glVertex2f(245.0f, 315.0f); 
    glVertex2f(235.0f, 315.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(255.0f, 305.0f); 
    glVertex2f(265.0f, 305.0f);
    glVertex2f(265.0f, 315.0f); 
    glVertex2f(255.0f, 315.0f);
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(275.0f, 305.0f); 
    glVertex2f(281.0f, 305.0f);
    glVertex2f(281.0f, 315.0f); 
    glVertex2f(275.0f, 315.0f);
    glEnd();
    
     //DECK 4
	glBegin(GL_QUADS);
    glColor3f(1.0f, 0.68f, 0.63f); 
    glVertex2f(205.0f, 320.0f); 
    glVertex2f(275.0f, 320.0f); 
    glVertex2f(270.0f, 340.0f); 
    glVertex2f(210.0f, 340.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(215.0f, 325.0f); 
    glVertex2f(225.0f, 325.0f); 
    glVertex2f(225.0f, 335.0f); 
    glVertex2f(215.0f, 335.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(235.0f, 325.0f); 
    glVertex2f(245.0f, 325.0f); 
    glVertex2f(245.0f, 335.0f); 
    glVertex2f(235.0f, 335.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glVertex2f(255.0f, 325.0f); 
    glVertex2f(265.0f, 325.0f); 
    glVertex2f(265.0f, 335.0f); 
    glVertex2f(255.0f, 335.0f); 
    glEnd();
    
    //tower
    
    glBegin(GL_LINES);
    glColor3f(1.0,1.0,1.0);
    glVertex2f(235.0,340.0);
    glVertex2f(235.0,370.0);
    glEnd();
    
    glBegin(GL_LINES);
    glVertex2f(250.0,340.0);
    glVertex2f(250.0,380.0);
    glEnd();
    
    glBegin(GL_LINES);
    glVertex2f(225.0,355.0);
    glVertex2f(260.0,355.0);
    glEnd();
    
    
    glPopMatrix();
}
	
	



void drawWater() {
	
	glPushMatrix();    
    glBegin(GL_QUADS);
    glColor3f(0.2f, 0.0f, 1.0f); 
    glVertex2f(100.0f,100.0f); 
    glVertex2f(100.0f,600.0f); 
    glVertex2f(600.0f,600.0f); 
    glVertex2f(600.0f,100.0f);
    glEnd();
    glPopMatrix();
}

void drawBoat() {
    glPushMatrix();
    glTranslatef(boatX, boatY, 0.0f);
    
    glPushMatrix();
    glTranslatef(125.0,110.0,0.0);
    glScalef(1.7,1.2,0.0);
    glTranslatef(-125.0,-110.0,0.0);

    //BOAT BASE
    glBegin(GL_QUADS);
    glColor3f(0.0f, 1.0f, 0.0f); // Red color
    glVertex2f(125.0f, 110.0f); // bottom - left
    glVertex2f(170.0f, 110.0f); //bottom-right
    glVertex2f(185.0f, 140.0f); // top-right
    glVertex2f(110.0f, 140.0f); // top-left
    glEnd();
    
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(135.0f, 116.0f); 
    glVertex2f(160.0f, 116.0f); 
    glVertex2f(160.0f, 121.0f); 
    glVertex2f(135.0f, 121.0f); 
    glEnd();
    
    glBegin(GL_QUADS);
    glColor3f(0.0f, 0.0f, 0.0f); 
    glVertex2f(130.0f, 134.0f); 
    glVertex2f(165.0f, 134.0f); 
    glVertex2f(165.0f, 129.0f); 
    glVertex2f(130.0f, 129.0f); 
    glEnd();
    
    glBegin(GL_TRIANGLES);
    glColor3f(0.5f, 0.7f, 0.0f); 
    glVertex2f(185.0f,140.0f); 
    glVertex2f(185.0f, 150.0f); 
    glVertex2f(190.0f, 145.0f); 
    glEnd();
    
    
    glBegin(GL_TRIANGLES);
    glColor3f(0.5f, 0.7f, 0.0f); 
    glVertex2f(110.0f,140.0f); 
    glVertex2f(110.0f,150.0f); 
    glVertex2f(105.0f,145.0f); 
    glEnd();
    
    glPopMatrix();

    glPopMatrix();
}




void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();
    glClearColor(1.0,1.0,1.0,1.0);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); 
    switch(pgno)
    {
    	case 0 :
			drawStart();
			break;
		case 1:
			drawWater();
			drawTruck();
			drawLBridge();
			drawLFan();
			drawShip();
			drawRBridge();
			drawRFan();
			drawBoat();
			drawSignal();
			break;
	}

	glFlush();

    glutSwapBuffers();
}

void reshape(int width, int height) {
    glViewport(0, 0, width, height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(100.0, 600.0, 100.0, 600.0);
    glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
    	case 32 : 
    		pgno = 1;
    		break;
		case 'r' :
			pgno = 0;
			break;
    
        case 'a':
            boatX -= 5.0f;
            break;
        case 'd':
            boatX += 5.0f;
            break;
            
        case 'i' : 
        	if(b1_angle[axis] < 80)
        		b1_angle[axis] += 1.0;
        	break;
    	case 'j' : 
    		if(b1_angle[axis] > 0)
        		b1_angle[axis] -= 1.0;
        	break;
        	
    	case 'o' : 
        	if(b1_angle[axis] <80 )
        		b1_angle[axis] += 1.0;
    		if(b2_angle[axis] < 80 )
        		b2_angle[axis] += 1.0;
        	break;
    	case 'k' : 
    		if(b1_angle[axis] > 0)
        		b1_angle[axis] -= 1.0;
    		if(b2_angle[axis] > 0)
        		b2_angle[axis] -= 1.0;
        	break;
        	
    	case 'p' : 
    		if(b2_angle[axis] < 80)
        		b2_angle[axis] += 1.0;
        	break;
    	case 'l' : 
    		if(b2_angle[axis] > 0)
        		b2_angle[axis] -= 1.0;
        	break;
        	
    	case 's' : 
    		signal = 1;
    		glutIdleFunc(drawRFan);
    		glutIdleFunc(drawLFan);
    		break;
		case 'w' : 
    		signal = 0;
    		break;
    		
		case 'm' : 
			truck_move = 1;
			if(signal == 0)
    			glutIdleFunc(drawTruck);
    		break;
			
		case 'x' :
			sx -= 10.0f;
			break;
		
		case 'Y' :
			sy += 10.0f;
			break;
			
		case 'X':
			sx += 10.0f;
			break;
		
		case 'y':
			sy -= 10.0f;
			break;
			
		case 'q' :
			exit(0);
			break;
			
    }
    glutPostRedisplay();
}

void menu(int id)
{
	switch(id)
	{
		case 51:
			signal = 1;
    		glutIdleFunc(drawRFan);
    		glutIdleFunc(drawLFan);
    		break;
		break;
		
		case 52 : 
    		signal = 0;
    		break;
    		
		case 53 : 
    		pgno = 0;
    		break;
    		
		case 54 :
			exit(0);
			break;
	} 
	glutPostRedisplay();
		
}
	
void createmenu()
{
	int sub = glutCreateMenu(menu);
	glutAddMenuEntry("START",51);
	glutAddMenuEntry("STOP",52);
	glutCreateMenu(menu);
	glutAddSubMenu("ENGINE",sub);
	glutAddMenuEntry("GO TO START",53);
	glutAddMenuEntry("EXIT",54);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
}
		

void main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
    glutInitWindowSize(900, 600);
    glutCreateWindow("Bridge Simulation");
	createmenu();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

}